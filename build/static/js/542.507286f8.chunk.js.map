{"version":3,"file":"static/js/542.507286f8.chunk.js","mappings":"mRA0JA,UAhJe,WACb,MAAeA,EAAAA,EAAAA,UAARC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAD,cAAWA,QAAX,IAAWA,OAAX,EAAWA,EAAOC,IAAlB,IAAxBH,QAER,GAA0BI,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAcA,OACE,UAACC,EAAD,YACE,iBAAKC,UAAU,OAAf,WACA,8BACI,gBAAKC,MAAO,CAAEC,QAAS,MAAOC,MAAO,OAAQC,OAAQ,QAAUC,IAAKC,EAASC,IAAI,aAEnF,SAAC,UAAD,CAAkBN,MAAO,CAAEO,UAAW,UAAYC,MAAO,KACzD,SAAC,UAAD,CAAkBA,MAAO,EAAzB,uBACA,sBAEF,UAAC,IAAD,CACEC,aAAa,WACbvB,KAAMA,EACNwB,SAzBW,SAACC,GAChB,IAAMC,EAAU,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAOE,UAAUC,MAAM,KAAK,GACzCC,EAAS,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAOE,UAAUC,MAAM,KAAK,GAC9C3B,GAAS6B,EAAAA,EAAAA,KAAO,kBAAKL,GAAN,IAAaC,WAAAA,EAAYG,UAAAA,MAAcE,MAAK,SAACC,GAAc,IAAD,IACvE,OAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAUC,eAAd,OAAI,EAAmBvB,MACrBC,EAAS,CAAED,OAAO,EAAMwB,QAASF,EAASC,QAAQC,WACZ,KAArB,OAARF,QAAQ,IAARA,GAAA,UAAAA,EAAUC,eAAV,eAAmBvB,QAC5BP,EAAS,aAEZ,GACF,EAgBKgC,KAAK,aACLC,OAAO,WACPC,aAAa,QANf,WAQE,SAAC,SAAD,CACEC,MAAO,CACL,CACEC,UAAU,EACVL,QAAS,gCAGbM,MAAM,aACNL,KAAK,YARP,UAUE,SAAC,IAAD,CAAOM,KAAK,QAAQC,YAAY,YAAYL,aAAc,WAE5D,SAAC,SAAD,CACEC,MAAO,CACL,CACEC,UAAU,EACVL,QAAS,mCAEX,CACES,KAAM,QACNT,QAAS,+BAGbM,MAAM,SACNL,KAAK,QAZP,UAcE,SAAC,IAAD,CAAOM,KAAK,QAAQC,YAAY,QAAQL,aAAc,WAExD,SAAC,SAAD,CACEC,MAAO,CACL,CACEC,UAAU,EACVL,QAAS,kCAEX,CACEA,QAAS,oCACTU,IAAK,EACLC,IAAK,KAGTL,MAAM,gBACNL,KAAK,eAbP,UAeE,SAAC,IAAD,CAAOM,KAAK,QAAQC,YAAY,eAAeL,aAAc,WAE/D,SAAC,SAAD,CACEC,MAAO,CACL,CACEC,UAAU,EACVL,QAAS,+BAGbM,MAAM,YACNL,KAAK,WARP,UAUE,SAAC,IAAD,CAAOE,aAAa,MAAMI,KAAK,QAAQE,KAAK,gBAE9C,SAAC,SAAD,CACEL,MAAO,CACL,CACEC,UAAU,EACVL,QAAS,oCAEX,gBAAGY,EAAH,EAAGA,cAAH,MAAwB,CACtBC,UADsB,SACZC,EAAGvB,GACX,OAAKA,GAASqB,EAAc,cAAgBrB,EAGrCwB,QAAQC,OAAO,IAAIC,MAAM,qDAFvBF,QAAQG,SAGlB,EANH,GASFZ,MAAM,oBACNL,KAAK,wBAhBP,UAkBE,SAAC,IAAD,CAAOE,aAAa,MAAMI,KAAK,QAAQE,KAAK,gBAE9C,SAAC,SAAD,WACE,UAAC,IAAD,CACEF,KAAK,QACLY,SAAS,SAETvC,MAAO,CAACwC,MAAO,OAAQC,gBAAgB,WACvCC,OAAK,EACLnD,QAASA,EANX,qBAQW,aAIT,OAALK,QAAK,IAALA,OAAA,EAAAA,EAAOA,SAAS,SAAC,SAAD,CAAiBiC,KAAK,SAAtB,gBAAgCjC,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAOwB,WAExD,gBAAKrB,UAAU,aAAf,UACE,UAAC,SAAD,CAAiBA,UAAU,kBAAkBC,MAAO,CAACwC,MAAO,WAA5D,qCAC2B,KACzB,SAAC,SAAD,CAAiBG,QAAM,EAACd,KAAK,OAA7B,UACE,SAAC,KAAD,CAAM9B,UAAU,iBAAiB6C,GAAG,SAAS5C,MAAO,CAACwC,MAAO,WAA5D,4BAQX,EAID,IAAM1C,EAAiB+C,EAAAA,GAAAA,IAAH,uuB","sources":["pages/Auth/Signup.js"],"sourcesContent":["import { Form, Input, Button, Typography, Row, Col, Space, Avatar } from 'antd'\n\nimport React, { useState } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport Logo192 from '../../assets/logo.png'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { signup } from '../../redux/authSlice'\n\n\nconst Signup = () => {\n  const [form] = Form.useForm()\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const { loading } = useSelector((state) => state?.auth)\n\n  const [error, setError] = useState(null)\n\n  const onFinish = (value) => {\n    const first_name = value?.full_name.split(' ')[0]\n    const last_name = value?.full_name.split(' ')[1]\n    dispatch(signup({ ...value, first_name, last_name })).then((response) => {\n      if (response?.payload?.error) {\n        setError({ error: true, message: response.payload.message })\n      } else if (response?.payload?.error === false) {\n        navigate('/dashboard')\n      }\n    })\n  }\n\n  return (\n    <LoginContainer>\n      <div className='logo'>\n      <picture>       \n          <img style={{ padding: '5px', width: 'auto', height: '60px' }} src={Logo192} alt='helpa' />\n        </picture>\n        <Typography.Title style={{ textAlign: 'center' }} level={4}></Typography.Title>\n        <Typography.Title level={2}>Register</Typography.Title>\n        <br />\n      </div>\n      <Form\n        requiredMark='optional'\n        form={form}\n        onFinish={onFinish}\n        name='multi-form'\n        layout='vertical'\n        autoComplete='false'\n      >\n        <Form.Item\n          rules={[\n            {\n              required: true,\n              message: 'Please enter your full name',\n            },\n          ]}\n          label='Full Name '\n          name='full_name'\n        >\n          <Input size='large' placeholder='Full name' autoComplete={'off'} />\n        </Form.Item>\n        <Form.Item\n          rules={[\n            {\n              required: true,\n              message: 'Please enter your email address',\n            },\n            {\n              type: 'email',\n              message: 'Please enter a valid email',\n            },\n          ]}\n          label='Email '\n          name='email'\n        >\n          <Input size='large' placeholder='Email' autoComplete={'off'} />\n        </Form.Item>\n        <Form.Item\n          rules={[\n            {\n              required: true,\n              message: 'Please enter your phone number',\n            },\n            {\n              message: 'Please enter a valid phone number',\n              min: 5,\n              max: 15,\n            },\n          ]}\n          label='Phone number '\n          name='phone_number'\n        >\n          <Input size='large' placeholder='Phone number' autoComplete={'off'} />\n        </Form.Item>\n        <Form.Item\n          rules={[\n            {\n              required: true,\n              message: 'Please enter your password',\n            },\n          ]}\n          label='Password '\n          name='password'\n        >\n          <Input autoComplete='off' size='large' type='password' />\n        </Form.Item>\n        <Form.Item\n          rules={[\n            {\n              required: true,\n              message: 'Please enter your password again',\n            },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve()\n                }\n                return Promise.reject(new Error('The two passwords that you entered do not match!'))\n              },\n            }),\n          ]}\n          label='Confirm Password '\n          name='password_confirmation'\n        >\n          <Input autoComplete='off' size='large' type='password' />\n        </Form.Item>\n        <Form.Item>\n          <Button\n            size='large'\n            htmlType='submit'\n            // onClick={() => setError(null)}\n            style={{color: '#fff', backgroundColor:'#FF0303'}}\n            block\n            loading={loading}\n          >\n            Register{' '}\n          </Button>\n        </Form.Item>\n      </Form>\n      {error?.error && <Typography.Text type='danger'>{error?.message}</Typography.Text>}\n\n      <div className='no-account'>\n        <Typography.Text className='forgot-password' style={{color: '#FF0303'}}>\n          Already have an account?{' '}\n          <Typography.Text strong type='link'>\n            <Link className='create-account' to='/login' style={{color: '#FF0303'}}>\n              Login\n            </Link>\n          </Typography.Text>\n        </Typography.Text>\n      </div>\n    </LoginContainer>\n  )\n}\n\nexport default Signup\n\nconst LoginContainer = styled.div`\n  box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 0px 1px;\n  padding: 2rem;\n  width: 100%;\n\n  background-color: white;\n  border-radius: 0.5rem;\n\n  .logo img {\n    display: flex;\n    justify-content: center;\n    overflow: hidden;\n    height: 50px;\n    width: auto;\n    margin: 0 auto;\n  }\n\n  @media (min-width: 600px) {\n    padding: 3rem;\n    width: 500px;\n    margin: auto;\n  }\n\n  a .forgot-password {\n    color: red;\n    font-size: 0.75rem;\n  }\n\n  .no-account {\n    display: flex;\n    justify-content: center;\n    margin-top: 3rem;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.2rem;\n\n    a .create-account {\n      font-size: 1rem;\n      white-space: nowrap;\n    }\n  }\n`\n"],"names":["Form","form","dispatch","useDispatch","navigate","useNavigate","loading","useSelector","state","auth","useState","error","setError","LoginContainer","className","style","padding","width","height","src","Logo192","alt","textAlign","level","requiredMark","onFinish","value","first_name","full_name","split","last_name","signup","then","response","payload","message","name","layout","autoComplete","rules","required","label","size","placeholder","type","min","max","getFieldValue","validator","_","Promise","reject","Error","resolve","htmlType","color","backgroundColor","block","strong","to","styled"],"sourceRoot":""}