{"version":3,"file":"static/js/276.392a1609.chunk.js","mappings":"8PAmFA,EA/E4B,SAAC,GAQtB,IAPLA,EAOI,EAPJA,KACAC,EAMI,EANJA,QACAC,EAKI,EALJA,cAEAC,GAGI,EAJJC,UAII,EAHJD,eACAE,EAEI,EAFJA,aACAC,EACI,EADJA,cAEMC,EAAU,CACd,CACEC,MAAO,UACPC,UAAW,OACXC,MAAO,IACPC,IAAK,QAEP,CACEH,MAAO,SACPC,UAAW,cACXE,IAAK,cACLC,OAAQ,SAACC,GAAD,OAAiBA,GAAe,MAAhC,GAEV,CACEL,MAAO,SACPC,UAAW,cACXE,IAAK,cACLC,OAAQ,SAACC,GAAD,OAAiBA,GAAe,MAAhC,GAEV,CACEL,MAAO,eACPC,UAAW,aACXE,IAAK,aACLD,MAAO,IACPE,OAAQ,SAACE,GAAD,OACN,kBAAMC,MAAO,CAAEC,WAAY,UAA3B,cAAyCC,IAAOH,GAAYI,OAAO,iBAD7D,GAIV,CACEV,MAAO,GACPG,IAAK,cACLD,MAAO,IACPE,OAAQ,SAACO,GAAD,OACN,iBAAKJ,MAAO,CAAEK,QAAS,OAAQC,IAAK,SAApC,WACE,SAAC,IAAD,CACEC,QAAM,EACNrB,QAASK,EACTiB,QAAS,WACPlB,EAAac,EACd,EALH,qBASA,SAAC,IAAD,CACEI,QAAS,WACPrB,EAAciB,GACdhB,GAAc,EACf,EAJH,oBAXI,IAwBZ,OACE,0BACE,SAAC,IAAD,CACEI,QAASA,EACTN,QAASA,EACTuB,WAAYxB,EAAKyB,OAAS,GAC1BC,WAAY1B,EACZ2B,OAAO,KACPC,OAAQ,CAAEC,EAAG,kBAIpB,E,sDCmDD,EA3HiC,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,WAAY3B,EAAwC,EAAxCA,cAAe4B,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WACrE,GAA4CC,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,GAAWC,EAAAA,EAAAA,MAEjB,EAAeC,EAAAA,EAAAA,UAARC,GAAP,eAoEA,OACE,+BACE,SAAC,IAAD,CACE/B,MAAK,UAAKuB,EAAS,SAAW,SAAzB,mBACLS,QAASV,EACTW,KAvEW,WACfN,GAAkB,GAClBI,EACGG,iBACAC,MAAK,SAACC,GACLT,GAAkB,GAClBI,EAAKM,QACN,IACAC,OAAM,SAACC,GACNZ,GAAkB,EACnB,GACJ,EA6DKD,eAAgBA,EAChBc,SAAU,kBAAM7C,GAAc,EAApB,EACV8C,OAAM,UAAKlB,EAAS,SAAW,SAAzB,mBANR,UAQE,UAAC,IAAD,CACEmB,KAAK,iBACLC,OAAO,WACPC,SAlEa,SAACR,GACpBT,GAAkB,GAEdJ,EACFK,GAASiB,EAAAA,EAAAA,KAAkB,kBAAKT,GAAN,IAAcU,kBAAiB,OAAEtB,QAAF,IAAEA,OAAF,EAAEA,EAAYuB,OACpEZ,MAAK,SAACa,GAEL,GADArB,GAAkB,GACI,iCAAlBqB,EAASC,KACXrB,GAASsB,EAAAA,EAAAA,OACTvD,IACAwD,EAAAA,EAAAA,QAAqB,CACnBC,QAAS,6CAEN,GAAsB,gCAAlBJ,EAASC,KAAwC,CAAC,IAAD,EAC1DtD,IACAwD,EAAAA,EAAAA,MAAmB,CACjBC,SACU,OAARJ,QAAQ,IAARA,GAAA,UAAAA,EAAUK,eAAV,eAAmBD,UAAW,mDAEnC,CACF,IACAd,OAAM,SAACgB,GACN3B,GAAkB,GAClBwB,EAAAA,EAAAA,MAAmB,CACjBC,QAAS,yDAEZ,IAEHxB,GAAS2B,EAAAA,EAAAA,IAAoBnB,IAC1BD,MAAK,SAACa,GAEL,GADArB,GAAkB,GACI,mCAAlBqB,EAASC,KACXrB,GAASsB,EAAAA,EAAAA,OACTvD,IACAwD,EAAAA,EAAAA,QAAqB,CACnBC,QAAS,8CAEN,GAAsB,kCAAlBJ,EAASC,KAA0C,CAAC,IAAD,EAC5DtD,IACAwD,EAAAA,EAAAA,MAAmB,CACjBC,SACU,OAARJ,QAAQ,IAARA,GAAA,UAAAA,EAAUK,eAAV,eAAmBD,UAAW,mDAEnC,CACF,IACAd,OAAM,SAACgB,GACN3B,GAAkB,GAClBwB,EAAAA,EAAAA,MAAmB,CACjBC,QAAS,yDAEZ,GACN,EAgBOI,aAAa,WACbzB,KAAMA,EACN0B,cAAejC,EANjB,WAQE,SAAC,SAAD,CACEkB,KAAK,OACLgB,YAAY,OACZC,MAAM,sBACNC,MAAO,CACL,CACEC,UAAU,EACVT,QAAS,oCAPf,UAWE,SAAC,IAAD,CAAOU,KAAK,QAAQJ,YAAY,2BAGlC,SAAC,SAAD,CACEhB,KAAK,cACLgB,YAAY,cACZC,MAAM,cACNC,MAAO,CACL,CACEC,UAAU,EACVT,QAAS,4BAPf,UAWE,SAAC,IAAD,CAAOU,KAAK,QAAQJ,YAAY,wBAM3C,ECjDD,EA1EuB,WACrB,IAAQK,GAAmBC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,CAAX,IAA/BF,eACFnC,GAAWC,EAAAA,EAAAA,MAEjB,GAA8CJ,EAAAA,EAAAA,WAAS,GAAvD,eAAOyC,EAAP,KAAwBC,EAAxB,KACA,GAA4B1C,EAAAA,EAAAA,WAAS,GAArC,eAAOF,EAAP,KAAe3B,EAAf,KACA,GAAgC6B,EAAAA,EAAAA,UAAS,GAAzC,eAAO2C,EAAP,KAAiBC,EAAjB,KACA,GAAgC5C,EAAAA,EAAAA,UAAS,CAAC,GAA1C,eAAO6C,EAAP,KAAiBC,EAAjB,KACA,GAA4C9C,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KA2CA,OAZA6C,EAAAA,EAAAA,YAAU,WACRH,EAAYD,EAAW,IACC,IAApBF,IACFK,EAAY,CAAC,GACb3E,GAAU,GAEb,GAAE,CAACsE,KAEJM,EAAAA,EAAAA,YAAU,WACR5C,GAASsB,EAAAA,EAAAA,MACV,GAAE,KAGD,4BACE,SAAC,IAAD,CAAYuB,MAAO,GAAIzE,MAAM,qBAC7B,SAAC,EAAD,CACE0E,OAAQ,iBACRlF,KAAI,OAAEuE,QAAF,IAAEA,OAAF,EAAEA,EAAgBvE,KACtBC,QAAO,OAAEsE,QAAF,IAAEA,OAAF,EAAEA,EAAgBtE,QACzBC,cAhDgB,SAACF,GACrB+E,EAAY/E,GACZI,GAAU,EACX,EA8CKD,cAAewE,EACftE,aA7Ce,SAAC,GAAY,IAAVkD,EAAS,EAATA,GACtBnB,GAAS+C,EAAAA,EAAAA,IAAoB5B,IAC1BZ,MAAK,SAACa,GAEL,GADArB,GAAkB,GACI,mCAAlBqB,EAASC,KACXrB,GAASsB,EAAAA,EAAAA,OACTC,EAAAA,EAAAA,QAAqB,CACnBC,QAAS,8CAEN,GAAsB,kCAAlBJ,EAASC,KAA0C,CAAC,IAAD,EAC5DE,EAAAA,EAAAA,MAAmB,CACjBC,SACU,OAARJ,QAAQ,IAARA,GAAA,UAAAA,EAAUK,eAAV,eAAmBD,UAAW,mDAEnC,CACF,IACAd,OAAM,SAACgB,GACN3B,GAAkB,GAClBwB,EAAAA,EAAAA,MAAmB,CACjBC,QAAS,yDAEZ,GACJ,EAwBKtD,cAAe4B,KAEjB,SAAC,EAAD,CAEEJ,WAAY4C,EACZvE,cAAewE,EACf5C,OAAQA,EACRC,WAAY8C,GAJPF,KAQZ,C","sources":["pages/PaymentMethods/PaymentMethodsTable.js","pages/PaymentMethods/CreatePaymentMethodModal.js","pages/PaymentMethods/PaymentMethods.js"],"sourcesContent":["import { Button, Table } from 'antd'\nimport moment from 'moment'\nimport React from 'react'\n\nconst PaymentMethodsTable = ({\n  data,\n  loading,\n  setSingleData,\n  setUpdate,\n  handleVisible,\n  handleDelete,\n  deleteLoading,\n}) => {\n  const columns = [\n    {\n      title: 'Ref. Id',\n      dataIndex: 'name',\n      width: 300,\n      key: 'name',\n    },\n    {\n      title: 'Amount',\n      dataIndex: 'description',\n      key: 'description',\n      render: (description) => description || 'Null',\n    },\n    {\n      title: 'Status',\n      dataIndex: 'description',\n      key: 'description',\n      render: (description) => description || 'Null',\n    },\n    {\n      title: 'Date Created',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      width: 150,\n      render: (created_at) => (\n        <span style={{ whiteSpace: 'nowrap' }}> {moment(created_at).format('DD MMM YYYY')}</span>\n      ),\n    },\n    {\n      title: '',\n      key: 'description',\n      width: 200,\n      render: (category) => (\n        <div style={{ display: 'flex', gap: '.5rem' }}>\n          <Button\n            danger\n            loading={deleteLoading}\n            onClick={() => {\n              handleDelete(category)\n            }}\n          >\n            Delete\n          </Button>\n          <Button\n            onClick={() => {\n              setSingleData(category)\n              handleVisible(true)\n            }}\n          >\n            Edit\n          </Button>\n        </div>\n      ),\n    },\n  ]\n\n  return (\n    <div>\n      <Table\n        columns={columns}\n        loading={loading}\n        pagination={data.length > 10 ? true : false}\n        dataSource={data}\n        rowKey='id'\n        scroll={{ x: 'max-content' }}\n      />\n    </div>\n  )\n}\n\nexport default PaymentMethodsTable\n","import { Form, Modal, Input, notification } from 'antd'\nimport React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport {\n  createPaymentMethod,\n  editPaymentMethod,\n  getAllPaymentMethods,\n} from '../../redux/paymentMethodSlice'\n\nconst CreatePaymentMethodModal = ({ visibility, handleVisible, update, singleData }) => {\n  const [confirmLoading, setConfirmLoading] = useState(false)\n  const dispatch = useDispatch()\n\n  const [form] = Form.useForm()\n  // form.setFieldValue({ ...singleData });\n  const handleOk = () => {\n    setConfirmLoading(true)\n    form\n      .validateFields()\n      .then((values) => {\n        setConfirmLoading(false)\n        form.submit()\n      })\n      .catch((info) => {\n        setConfirmLoading(false)\n      })\n  }\n\n  const handleFinish = (values) => {\n    setConfirmLoading(true)\n\n    if (update)\n      dispatch(editPaymentMethod({ ...values, payment_method_id: singleData?.id }))\n        .then((response) => {\n          setConfirmLoading(false)\n          if (response.type === 'paymentMethod/edit/fulfilled') {\n            dispatch(getAllPaymentMethods())\n            handleVisible()\n            notification.success({\n              message: 'Payment method updated successfully',\n            })\n          } else if (response.type === 'paymentMethod/edit/rejected') {\n            handleVisible()\n            notification.error({\n              message:\n                response?.payload?.message || 'Error updating payment method, please try again',\n            })\n          }\n        })\n        .catch((error) => {\n          setConfirmLoading(false)\n          notification.error({\n            message: 'Error updating payment method, please try again later',\n          })\n        })\n    else\n      dispatch(createPaymentMethod(values))\n        .then((response) => {\n          setConfirmLoading(false)\n          if (response.type === 'paymentMethod/create/fulfilled') {\n            dispatch(getAllPaymentMethods())\n            handleVisible()\n            notification.success({\n              message: ' Payment method created successfully',\n            })\n          } else if (response.type === 'paymentMethod/create/rejected') {\n            handleVisible()\n            notification.error({\n              message:\n                response?.payload?.message || 'Error creating payment method, please try again',\n            })\n          }\n        })\n        .catch((error) => {\n          setConfirmLoading(false)\n          notification.error({\n            message: 'Error creating payment method, please try again later',\n          })\n        })\n  }\n\n  return (\n    <>\n      <Modal\n        title={`${update ? 'Update' : 'Create'} Payment Method`}\n        visible={visibility}\n        onOk={handleOk}\n        confirmLoading={confirmLoading}\n        onCancel={() => handleVisible(false)}\n        okText={`${update ? 'Update' : 'Create'} Payment Method`}\n      >\n        <Form\n          name='Payment Method'\n          layout='vertical'\n          onFinish={handleFinish}\n          requiredMark='optional'\n          form={form}\n          initialValues={singleData}\n        >\n          <Form.Item\n            name='name'\n            placeholder='Name'\n            label='Payment Method Name'\n            rules={[\n              {\n                required: true,\n                message: 'Payment method name is required',\n              },\n            ]}\n          >\n            <Input size='large' placeholder='Payment method name' />\n          </Form.Item>\n\n          <Form.Item\n            name='description'\n            placeholder='Description'\n            label='Description'\n            rules={[\n              {\n                required: true,\n                message: 'Description is required',\n              },\n            ]}\n          >\n            <Input size='large' placeholder='Description' />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  )\n}\n\nexport default CreatePaymentMethodModal\n","import React, { useEffect, useState } from 'react'\nimport { Button, notification, PageHeader } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PaymentMethodsTable from './PaymentMethodsTable'\nimport CreatePaymentMethodModal from './CreatePaymentMethodModal'\nimport { deletePaymentMethod, getAllPaymentMethods } from '../../redux/paymentMethodSlice'\n\nconst PaymentMethods = () => {\n  const { paymentMethods } = useSelector((state) => state)\n  const dispatch = useDispatch()\n\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [update, setUpdate] = useState(false)\n  const [modalKey, setModalKey] = useState(1)\n  const [editData, setEditData] = useState({})\n  const [confirmLoading, setConfirmLoading] = useState(false)\n\n  const setSingleData = (data) => {\n    setEditData(data)\n    setUpdate(true)\n  }\n\n  const handleDelete = ({ id }) => {\n    dispatch(deletePaymentMethod(id))\n      .then((response) => {\n        setConfirmLoading(false)\n        if (response.type === 'paymentMethod/delete/fulfilled') {\n          dispatch(getAllPaymentMethods())\n          notification.success({\n            message: ' Payment method deleted successfully',\n          })\n        } else if (response.type === 'paymentMethod/delete/rejected') {\n          notification.error({\n            message:\n              response?.payload?.message || 'Error deleting payment method, please try again',\n          })\n        }\n      })\n      .catch((error) => {\n        setConfirmLoading(false)\n        notification.error({\n          message: 'Error deleting payment method, please try again later',\n        })\n      })\n  }\n\n  useEffect(() => {\n    setModalKey(modalKey + 1)\n    if (showCreateModal === false) {\n      setEditData({})\n      setUpdate(false)\n    }\n  }, [showCreateModal])\n\n  useEffect(() => {\n    dispatch(getAllPaymentMethods())\n  }, [])\n\n  return (\n    <div>\n      <PageHeader extra={[]} title='Payment Methods' />\n      <PaymentMethodsTable\n        parent={'payment-method'}\n        data={paymentMethods?.data}\n        loading={paymentMethods?.loading}\n        setSingleData={setSingleData}\n        handleVisible={setShowCreateModal}\n        handleDelete={handleDelete}\n        deleteLoading={confirmLoading}\n      />\n      <CreatePaymentMethodModal\n        key={modalKey}\n        visibility={showCreateModal}\n        handleVisible={setShowCreateModal}\n        update={update}\n        singleData={editData}\n      />\n    </div>\n  )\n}\n\nexport default PaymentMethods\n"],"names":["data","loading","setSingleData","handleVisible","setUpdate","handleDelete","deleteLoading","columns","title","dataIndex","width","key","render","description","created_at","style","whiteSpace","moment","format","category","display","gap","danger","onClick","pagination","length","dataSource","rowKey","scroll","x","visibility","update","singleData","useState","confirmLoading","setConfirmLoading","dispatch","useDispatch","Form","form","visible","onOk","validateFields","then","values","submit","catch","info","onCancel","okText","name","layout","onFinish","editPaymentMethod","payment_method_id","id","response","type","getAllPaymentMethods","notification","message","payload","error","createPaymentMethod","requiredMark","initialValues","placeholder","label","rules","required","size","paymentMethods","useSelector","state","showCreateModal","setShowCreateModal","modalKey","setModalKey","editData","setEditData","useEffect","extra","parent","deletePaymentMethod"],"sourceRoot":""}